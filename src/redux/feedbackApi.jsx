// src/redux/feedbackApi.jsx

import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
// Импортируем функции из библиотеки Redux Toolkit для создания API и выполнения запросов.

export const feedbackApi = createApi({
    // Создаём объект feedbackApi с помощью функции createApi, который будет обрабатывать запросы к серверу для работы с отзывами.

    reducerPath: 'feedbackApi',
    // Указываем уникальный путь для редьюсера, чтобы Redux знал, как обработать состояние, связанное с этим API.

    baseQuery: fetchBaseQuery({ baseUrl: 'http://localhost:5000' }),
    // Указываем базовый URL для запросов, чтобы все запросы к API использовали этот URL (в данном случае, localhost на порту 5000).

    tagTypes: ['Feedback'],
    // Определяем теги для инвалидации кэшированных данных. В данном случае — 'Feedback', чтобы отслеживать данные отзывов.

    endpoints: (builder) => ({
        // Определяем доступные endpoints (конечные точки) API для взаимодействия с данными.

        getFeedbacks: builder.query({
            // Создаем endpoint для получения списка отзывов (GET запрос).

            query: () => '/feedback',
            // Указываем путь для получения данных о всех отзывах. Это запрос по адресу '/feedback'.

            providesTags: ['Feedback'],
            // Указываем, что этот endpoint предоставляет теги 'Feedback' для кэширования и отслеживания состояния.

        }),

        addFeedback: builder.mutation({
            // Создаем endpoint для добавления нового отзыва (POST запрос).

            query: (feedback) => ({
                // Для запроса на сервер используем данные отзыва, переданные в качестве аргумента.

                url: '/feedback',
                // Указываем URL для добавления нового отзыва.

                method: 'POST',
                // Указываем HTTP метод (POST), который будет использоваться для добавления отзыва.

                body: feedback,
                // Передаем тело запроса, содержащее данные отзыва.

            }),

            invalidatesTags: ['Feedback'],
            // После успешного выполнения запроса (добавление отзыва) инвалидация тега 'Feedback' — кэшированные данные для отзывов будут обновлены.

        }),

        deleteFeedback: builder.mutation({
            // Создаем endpoint для удаления отзыва (DELETE запрос).

            query: (id) => ({
                // Для запроса на сервер передаем ID отзыва, который нужно удалить.

                url: `/feedback/${id}`,
                // Указываем URL с ID отзыва для удаления.

                method: 'DELETE',
                // Указываем HTTP метод (DELETE), который будет использоваться для удаления отзыва.

            }),

            invalidatesTags: ['Feedback'],
            // После успешного удаления отзыва инвалидация тега 'Feedback' — кэшированные данные для отзывов будут обновлены.

        }),
    }),

});

export const {
    // Экспортируем хуки для работы с запросами (из API).

    useGetFeedbacksQuery,
    // Хук для получения списка всех отзывов с помощью GET запроса.

    useAddFeedbackMutation,
    // Хук для добавления нового отзыва с помощью POST запроса.

    useDeleteFeedbackMutation,
    // Хук для удаления отзыва с помощью DELETE запроса.

} = feedbackApi;
// Экспортируем хуки, чтобы их можно было использовать в компонентах для работы с API.
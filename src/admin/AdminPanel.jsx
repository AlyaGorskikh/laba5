import React, { useEffect, useState, useMemo, useCallback } from 'react'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ö—É–∫–∏ React
import { useAuth } from '../auto/AuthContext'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö—É–∫ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
import { useTable, useSortBy } from 'react-table'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
import { DndContext, useSensor, useSensors, PointerSensor, closestCenter } from '@dnd-kit/core'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
import { SortableContext, useSortable, horizontalListSortingStrategy } from '@dnd-kit/sortable'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
import { CSS } from '@dnd-kit/utilities'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSS
import 'bootstrap/dist/css/bootstrap.min.css'; // –ü–æ–¥–∫–ª—é—á–∞–µ–º Bootstrap –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
const SortableHeader = ({ column }) => {
    const {
        attributes,
        listeners,
        setNodeRef,
        transform,
        transition,
        isDragging,
    } = useSortable({ id: column.id }); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º dnd-kit

    const style = {
        transform: CSS.Transform.toString(transform), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        transition, // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
        cursor: isDragging ? 'grabbing' : 'pointer', // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        whiteSpace: 'nowrap', // –ó–∞–ø—Ä–µ—â–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Ç–µ–∫—Å—Ç–∞
    };

    const handleClick = (e) => {
        if (isDragging) {
            e.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞, –µ—Å–ª–∏ –∏–¥–µ—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
            return;
        }
        column.getSortByToggleProps().onClick(e); // –í—ã–∑—ã–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É —Å—Ç–æ–ª–±—Ü–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ
    };

    return (
        <th
            {...column.getHeaderProps(column.getSortByToggleProps())} // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–ø—Å—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            ref={setNodeRef} // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ DOM-—ç–ª–µ–º–µ–Ω—Ç
            style={style} // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
            {...attributes} // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            {...listeners} // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
            onClick={handleClick} // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        >
            {column.render('Header')} {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–æ–ª–±—Ü–∞*/}
            <span>
                {column.isSorted ? (column.isSortedDesc ? ' üîΩ' : ' üîº') : ''} {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∫–æ–Ω–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏*/}
            </span>
        </th>
    );
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const AdminPanel = () => {
    const { userRole } = useAuth(); // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const [users, setUsers] = useState([]); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const [loading, setLoading] = useState(true); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    const [error, setError] = useState(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫
    const [rowOrder, setRowOrder] = useState([]); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ—Ä—è–¥–∫–∞ —Å—Ç—Ä–æ–∫
    const [columnOrder, setColumnOrder] = useState([]); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ—Ä—è–¥–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
    const [newUser, setNewUser] = useState({ email: '', password: '', role: 'user' }); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    const sensors = useSensors(
        useSensor(PointerSensor, {
            activationConstraint: { distance: 10 } // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–Ω—Å–æ—Ä–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        })
    );

    useEffect(() => {
        fetchUsers(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    }, []);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞
    const fetchUsers = async () => {
        try {
            const response = await fetch('http://localhost:5000/users'); // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'); // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            const data = await response.json(); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ JSON
            setUsers(data); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        } catch (err) {
            setError(err.message); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        } finally {
            setLoading(false); // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        }
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å—Ç—Ä–æ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    useEffect(() => {
        setRowOrder(users.map(user => user.id));
    }, [users]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const handleDelete = useCallback(async (userId) => {
        try {
            const response = await fetch(`http://localhost:5000/users/${userId}`, { method: 'DELETE' }); // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'); // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            setUsers(prev => prev.filter(user => user.id !== userId)); // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        } catch (err) {
            alert(err.message); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        }
    }, []);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const handleBlock = useCallback(async (userId, isBlocked) => {
        try {
            const response = await fetch(`http://localhost:5000/users/${userId}`, {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ blocked: !isBlocked }) // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            });
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏'); // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            setUsers(prev =>
                prev.map(user => user.id === userId ? { ...user, blocked: !isBlocked } : user) // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            );
        } catch (err) {
            alert(err.message); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        }
    }, []);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const handleAddUser = async (e) => {
        e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã
        const { email, password, role } = newUser; // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        if (!email || !password || !role) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è'); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
            return;
        }

        try {
            const response = await fetch('http://localhost:5000/users', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email, password, role, blocked: false }) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            });
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'); // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            const newUserData = await response.json(); // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            setUsers(prev => [...prev, newUserData]); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            setNewUser({ email: '', password: '', role: 'user' }); // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        } catch (err) {
            alert(err.message); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        }
    };

    // –û–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    const allColumns = useMemo(() => [
        { Header: 'ID', accessor: 'id', id: 'id' }, // –°—Ç–æ–ª–±–µ—Ü –¥–ª—è ID
        { Header: 'Email', accessor: 'email', id: 'email' }, // –°—Ç–æ–ª–±–µ—Ü –¥–ª—è Email
        { Header: '–†–æ–ª—å', accessor: 'role', id: 'role' }, // –°—Ç–æ–ª–±–µ—Ü –¥–ª—è —Ä–æ–ª–∏
        {
            Header: '–î–µ–π—Å—Ç–≤–∏—è',
            accessor: 'actions',
            id: 'actions',
            Cell: ({ row }) => (
                <>
                    <button
                        className="btn btn-danger btn-sm"
                        onClick={() => handleDelete(row.original.id)} // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    >
                        –£–¥–∞–ª–∏—Ç—å
                    </button>
                    <button
                        className={`btn ${row.original.blocked ? 'btn-success' : 'btn-warning'} btn-sm ms-2`}
                        onClick={() => handleBlock(row.original.id, row.original.blocked)} // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    >
                        {row.original.blocked ? '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'}
                    </button>
                </>
            ),
        },
    ], [handleDelete, handleBlock]);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤, –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    useEffect(() => {
        if (columnOrder.length === 0) {
            setColumnOrder(allColumns.map(col => col.id)); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤
        }
    }, [allColumns, columnOrder]);

    // –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
    const orderedColumns = useMemo(() => {
        return columnOrder.map(id => allColumns.find(col => col.id === id)).filter(Boolean);
    }, [columnOrder, allColumns]);

    // –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫ –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
    const data = useMemo(() =>
        rowOrder.map(id => users.find(user => user.id === id)).filter(Boolean),
        [users, rowOrder]
    );

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º react-table
    const {
        getTableProps,
        getTableBodyProps,
        headerGroups,
        rows,
        prepareRow,
    } = useTable({ columns: orderedColumns, data }, useSortBy);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
    const handleDragEnd = (event) => {
        const { active, over } = event;
        if (active?.id !== over?.id) {
            const oldIndex = columnOrder.indexOf(active.id);
            const newIndex = columnOrder.indexOf(over.id);
            const updated = [...columnOrder];
            const [moved] = updated.splice(oldIndex, 1);
            updated.splice(newIndex, 0, moved);
            setColumnOrder(updated); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        }
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –µ—Å–ª–∏ —Ä–æ–ª—å –ø—É—Å—Ç–∞—è, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞
    if (userRole === '') return <p>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞...</p>;

    // –ï—Å–ª–∏ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ 'admin', –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω
    if (userRole !== 'admin') return <h2>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.</h2>;

    // –ï—Å–ª–∏ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    if (loading) return <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</p>;

    // –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
    if (error) return <p>–û—à–∏–±–∫–∞: {error}</p>;

    return (
        <div className="container mt-4"> {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */}
            <h3>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3> {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}

            {/* –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è */}
            <DndContext sensors={sensors} collisionDetection={closestCenter} onDragEnd={handleDragEnd}>
                {/* –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ */}
                <SortableContext items={columnOrder} strategy={horizontalListSortingStrategy}>
                    <table className="table" {...getTableProps()}> {/* –¢–∞–±–ª–∏—Ü–∞ —Å –ø—Ä–æ–ø—Å–∞–º–∏ –æ—Ç useTable */}
                        <thead>
                            {headerGroups.map(headerGroup => (
                                <tr {...headerGroup.getHeaderGroupProps()}> {/* –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ */}
                                    {headerGroup.headers.map(column => (
                                        <SortableHeader key={column.id} column={column} /> // –†–µ–Ω–¥–µ—Ä–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
                                    ))}
                                </tr>
                            ))}
                        </thead>
                        <tbody {...getTableBodyProps()}> {/* –¢–µ–ª–æ —Ç–∞–±–ª–∏—Ü—ã */}
                            {rows.map(row => {
                                prepareRow(row); // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞
                                return (
                                    <tr {...row.getRowProps()}> {/* –°—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã */}
                                        {row.cells.map(cell => (
                                            <td {...cell.getCellProps()}>{cell.render('Cell')}</td> // –Ø—á–µ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–Ω–¥–µ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö 
                                        ))}
                                    </tr>
                                );
                            })}
                        </tbody>
                    </table>
                </SortableContext>
            </DndContext>

            <hr /> {/* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */}

            <h4>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h4> {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
            <form onSubmit={handleAddUser} className="row g-3"> {/* –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
                <div className="col-md-4"> {/* –°—Ç–æ–ª–±–µ—Ü –¥–ª—è –≤–≤–æ–¥–∞ email */}
                    <input
                        type="email"
                        className="form-control"
                        placeholder="Email"
                        value={newUser.email}
                        onChange={(e) => setNewUser({ ...newUser, email: e.target.value })} // –û–±–Ω–æ–≤–ª—è–µ–º email –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                    />
                </div>
                <div className="col-md-4"> {/* –°—Ç–æ–ª–±–µ—Ü –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è */}
                    <input
                        type="password"
                        className="form-control"
                        placeholder="–ü–∞—Ä–æ–ª—å"
                        value={newUser.password}
                        onChange={(e) => setNewUser({ ...newUser, password: e.target.value })} // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                    />
                </div>
                <div className="col-md-3"> {/* –°—Ç–æ–ª–±–µ—Ü –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
                    <select
                        className="form-select"
                        value={newUser.role}
                        onChange={(e) => setNewUser({ ...newUser, role: e.target.value })} // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                    >
                        <option value="user">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</option> {/* –û–ø—Ü–∏—è –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
                        <option value="admin">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</option> {/* –û–ø—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ */}
                    </select>
                </div>
                <div className="col-md-1"> {/* –°—Ç–æ–ª–±–µ—Ü –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã */}
                    <button type="submit" className="btn btn-primary w-100"> {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã */}
                        –î–æ–±–∞–≤–∏—Ç—å
                    </button>
                </div>
            </form>
        </div>
    );
};

export default AdminPanel; // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç AdminPanel
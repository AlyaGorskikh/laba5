// src/feedback/FeedbackContext.jsx
import React, { createContext, useContext, useState } from 'react';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º React –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ö—É–∫–∏: createContext (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞), useContext (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞), useState (–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º).

import {
    useGetFeedbacksQuery,
    useAddFeedbackMutation,
    useDeleteFeedbackMutation
} from '../redux/feedbackApi';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö—É–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∏ –º—É—Ç–∞—Ü–∏—è–º–∏ API, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã–º–∏ Redux (–ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ).

const FeedbackContext = createContext();
// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç FeedbackContext –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –æ—Ç–∑—ã–≤–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.

const mockFeedbacks = [
    { id: '1', name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', feedback: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤!' },
    { id: '2', name: 'Dev Tester', feedback: '–†–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ üëç' },
];
// –°–æ–∑–¥–∞—ë–º –º–∞—Å—Å–∏–≤ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (mock mode).

export const FeedbackProvider = ({ children }) => {
    // –°–æ–∑–¥–∞—ë–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä FeedbackProvider, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—Å–µ–≥–æ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.

    const query = useGetFeedbacksQuery();
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–æ–≤ —Å –ø–æ–º–æ—â—å—é —Ö—É–∫–∞ useGetFeedbacksQuery, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ.

    const [addFeedbackMutation] = useAddFeedbackMutation();
    // –°–æ–∑–¥–∞—ë–º –º—É—Ç–∞—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ —Å –ø–æ–º–æ—â—å—é —Ö—É–∫–∞ useAddFeedbackMutation. –≠—Ç–æ—Ç —Ö—É–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞.

    const [deleteFeedbackMutation] = useDeleteFeedbackMutation();
    // –°–æ–∑–¥–∞—ë–º –º—É—Ç–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ —Å –ø–æ–º–æ—â—å—é —Ö—É–∫–∞ useDeleteFeedbackMutation. –≠—Ç–æ—Ç —Ö—É–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞.

    // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    const [useMockData, setUseMockData] = useState(false);
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ useMockData —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∂–∏–º–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö). –ï—Å–ª–∏ true, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã, –µ—Å–ª–∏ false ‚Äî –¥–∞–Ω–Ω—ã–µ –∏–∑ API.

    // –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    const [testState, setTestState] = useState({
        isLoading: false,
        isError: false,
    });
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ testState —Ö—Ä–∞–Ω–∏—Ç —Ñ–ª–∞–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏ (isLoading) –∏ –æ—à–∏–±–∫–∏ (isError) –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

    const toggleMockFlag = (flag) => {
        // –§—É–Ω–∫—Ü–∏—è toggleMockFlag –∏–∑–º–µ–Ω—è–µ—Ç —Ñ–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è isLoading –∏–ª–∏ isError.
        setTestState((prev) => ({
            ...prev,
            [flag]: !prev[flag],
        }));
    };

    const toggleMockMode = () => {
        // –§—É–Ω–∫—Ü–∏—è toggleMockMode –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö).
        setUseMockData((prev) => !prev);
        setTestState({ isLoading: false, isError: false });
        // –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–∫–∏.
    };

    const addFeedback = async (feedback) => {
        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞.
        try {
            await addFeedbackMutation(feedback).unwrap();
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ —Å –ø–æ–º–æ—â—å—é –º—É—Ç–∞—Ü–∏–∏.
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:', error);
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.
        }
    };

    const deleteFeedback = async (id) => {
        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –ø–æ –µ–≥–æ id.
        try {
            await deleteFeedbackMutation(id).unwrap();
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞.
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:', error);
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.
        }
    };

    // –£—Å–ª–æ–≤–∏–µ: –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ / –æ—à–∏–±–∫–∏
    const shouldHideMockFeedbacks =
        useMockData && (testState.isLoading || testState.isError);
    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –æ—à–∏–±–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ true, —Å–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã.

    const displayedFeedbacks = shouldHideMockFeedbacks
        ? []
        : (useMockData ? mockFeedbacks : (query.data || []));
    // –í—ã–±–∏—Ä–∞–µ–º, –∫–∞–∫–∏–µ –æ—Ç–∑—ã–≤—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å: –µ—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã —Å–∫—Ä—ã—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.
    // –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º mockFeedbacks, –∏–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤—ã –∏–∑ query (–¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞).

    return (
        <FeedbackContext.Provider
            value={{
                feedbacks: displayedFeedbacks,
                isLoading: useMockData ? testState.isLoading : query.isLoading,
                isError: useMockData ? testState.isError : query.isError,
                addFeedback,
                deleteFeedback,
                useMockData,
                toggleMockMode,
                toggleMockFlag,
                testState,
            }}
        >
            {children}
        </FeedbackContext.Provider>
    );
    // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (children) –≤ FeedbackContext.Provider –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ value,
    // —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç.

};

export const useFeedback = () => useContext(FeedbackContext);
// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö—É–∫ useFeedback, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥—Ä—É–≥–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ FeedbackContext.